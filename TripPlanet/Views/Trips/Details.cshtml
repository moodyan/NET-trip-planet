@{
    ViewData["Title"] = "Trip Overview";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@model TripPlanet.Models.Trip

<div class="thisbackground">
    <div class="trip-title">
        <h1><span>@Model.Name</span></h1>
    </div>
    <br />
    <div class="map-container">

        <div id="map_canvas" style="width: 80vw; height: 60vh;"></div>
    </div>
    <br />
    <p>@Html.DisplayFor(model => model.BeginDate) - @Html.DisplayFor(model => model.EndDate)</p>
    <p>Length of Trip: @Model.TripLength Days</p>
    <p>Estimated Budget: @Html.DisplayFor(model => model.Budget)</p>
    <p>Budget Used: @ViewBag.BudgetUsed</p>
    @*<p>@Html.DisplayNameFor(model => model.Members) : @Html.DisplayFor(model => model.Members)</p>*@

    <h3>@Html.ActionLink("View Trip Details", "Index", "Cities", new { id = Model.TripId })</h3>

    <br /><br />
    @Html.ActionLink("Edit Trip Details", "Edit", new { id = Model.TripId }, new { @class = "waves-effect waves-light btn" })
    @Html.ActionLink("Delete This Trip", "Delete", new { id = Model.TripId }, new { @class = "waves-effect waves-light btn red lighten-1" })
    <br />
    <p>@Html.ActionLink("Back to Trips", "Index")</p>
</div>

<script>

    window.onload = function () {
        var jsonLocations = '@Html.Raw(ViewBag.LatLong)';
        var locations = JSON.parse(jsonLocations);
        var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        var labelIndex = 0;

        var mapOptions = {
            center: new google.maps.LatLng('@ViewBag.StartLatLong[0]', '@ViewBag.StartLatLong[1]'),
            zoom: 5,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        var map = new google.maps.Map(document.getElementById("map_canvas"),
            mapOptions);

        tripCoordinates = new Array();
        var startLat = @ViewBag.StartLatLong[0];
        var startLong = @ViewBag.StartLatLong[1];
        tripCoordinates.push({ lat: startLat, lng: startLong });

        var bounds = new google.maps.LatLngBounds();
        var startMarker = new google.maps.Marker({
            position: new google.maps.LatLng('@ViewBag.StartLatLong[0]', '@ViewBag.StartLatLong[1]'),
            map: map
        });
        bounds.extend(startMarker.position);

        var infowindow;

        for (i = 0; i < locations.length; i++) {
            var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
            var ad = new Date((locations[i].ArrivalDate));
            var arrivalDate = ad.toLocaleDateString("en-US", options);
            var dd = new Date((locations[i].DepartureDate));
            var departureDate = dd.toLocaleDateString("en-US", options);

            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(locations[i].Latitude, locations[i].Longitude),
                label: labels[labelIndex++ % labels.length],
                map: map,
                title: '<h5>' + locations[i].Name + '</h5>' + '<p><b>Dates</b>: ' + arrivalDate + ' - ' + departureDate + '</p>'
            });
            infowindow = new google.maps.InfoWindow({
                maxWidth: 200
            });

            tripCoordinates.push({ lat: locations[i].Latitude, lng: locations[i].Longitude });
            bounds.extend(marker.position);

            google.maps.event.addListener(marker, 'click', function () {
                infowindow.setContent(this.title);
                infowindow.open(map, this);
            });

            google.maps.event.addListener(marker, 'mouseover', (function (marker, i) {
                return function () {
                    infowindow.setContent(String(locations[i].Name));
                    infowindow.open(map, marker);
                }
            })(marker, i));

            google.maps.event.addListener(marker, 'mouseout', function () {
                infowindow.close();
            });

        }
        var tripPath = new google.maps.Polyline({
            path: tripCoordinates,
            geodesic: true,
            strokeColor: '#FF0000',
            strokeOpacity: 1.0,
            strokeWeight: 2
        });
        tripPath.setMap(map);
        map.fitBounds(bounds);

        var lastValidCenter = map.getCenter();

        google.maps.event.addListener(map, 'center_changed', function () {
            if (bounds.contains(map.getCenter())) {
                lastValidCenter = map.getCenter();
                return;
            }
            map.panTo(lastValidCenter);
        });
    }

</script>